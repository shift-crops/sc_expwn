#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './pwn'
context(os = 'linux', arch = 'amd64')
context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'target', 'port':4296})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc.so.6')
env.select(args.ENV or 'debug')

#==========

binf = ELF(bin_file)
'''
addr_plt_puts       = binf.plt['puts']
addr_got_main       = binf.got['__libc_start_main']
addr_bss            = binf.sep_section['.bss']
addr_main           = binf.sep_function['main']
'''

libc = ELF(env.libc) if env.libc else binf.libc
'''
ofs_libc_main           = libc.sep_function['__libc_start_main']
ofs_libc_malloc_hook    = libc.symbols['__malloc_hook']
ofs_libc_mainarena      = ofs_libc_malloc_hook + 0x10
ofs_libc_stdin          = libc.symbols['_IO_2_1_stdin_']
ofs_libc_mainarena      = ofs_libc_stdin + 0x1e0
'''

#==========

def attack(conn, **kwargs):
    pwn = Pwn(conn)

    '''
    info('Hi')
    conn.recvuntil(b'> ')
    conn.sendline(b'hoge')
    conn.sendlineafter(b'> ', b'hoge')

    success('addr_heap_base    = 0x{:012x}'.format(addr_heap_base))

    libc.address = addr_libc_mainarena - ofs_libc_mainarena
    success('addr_libc_base    = 0x{:012x}'.format(libc.address))
    addr_libc_free_hook = libc.symbols['__free_hook']
    addr_libc_system    = libc.sep_function['system']
    addr_libc_str_sh    = next(libc.search(b'/bin/sh'))

    error('not found')
    '''

class Pwn:
    def __init__(self, conn):
        self.c = conn

    def func(self):
        self.c.sendlineafter(b'> ', b'1')

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()

if __name__=='__main__':
    main()

#==========
